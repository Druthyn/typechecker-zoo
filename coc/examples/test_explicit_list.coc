-- Test with explicit type applications
inductive Nat : Type with
  | zero : Nat
  | succ : Nat -> Nat

inductive List (A : Type) : Type with
  | nil : List A  
  | cons : A -> List A -> List A

-- Without implicit arguments, write it explicitly
def map (A : Type) (B : Type) (f : A -> B) (l : List A) : List B :=
  match l with
  case nil => nil B
  case cons(x, xs) => cons B (f x) (map A B f xs)

def test : List Nat := map Nat Nat succ (cons Nat zero (nil Nat))